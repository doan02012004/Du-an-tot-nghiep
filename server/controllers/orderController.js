import { StatusCodes } from "http-status-codes";
import orderModel from "../models/orderModel.js";
import CartModel from "../models/cartModel.js";
import crypto from 'crypto';
import querystring from 'qs';
import dateFormat from 'dateformat';
import { formatDateToCustomString, sortObject } from '../ultil/payment.js';
import ProductModel from "../models/productModel.js";
import sendEmail from "../utils/sendEmail.js";
import UserModel from "../models/userModel.js";

export const createOrder = async (req, res) => {
    try {
        const order = await orderModel.create(req.body);
        if (order) {
            const cart = await CartModel.findOne({ userId: order.userId })
            cart.carts.map(async (item) => {
                const product = await ProductModel.findById(item.productId)
                product.attributes.map(async (attribute) => {
                    if (attribute._id == item.attributeId) {
                        attribute.instock = attribute.instock - item.quantity
                        await product.save()
                    }
                })
            })
            cart.carts = [];
            cart.totalPrice = 0;
            cart.totalCart = 0;
            const user = await UserModel.findById(order.userId);
            const userEmail = user?.email || null;
            const voucher = order.voucher?.discountValue || 0;
            const shipPrice = order?.ship?.value?.price || 0;
            const price = order.totalPrice - shipPrice;
            const TotalAmount = voucher ? (order?.totalPrice - voucher?.discountValue) : order?.totalPrice;

            if (userEmail) {
                if (order.paymentMethod === "cash") {
                    const subject = "X√°c nh·∫≠n ƒë∆°n h√†ng t·ª´ Fendi Shop";

                    const message = `
                        <div style="font-family: Arial, sans-serif; max-width: 600px; margin: auto; padding: 20px; background: #f9f9f9; border: 1px solid #ddd; border-radius: 10px;">
                            <div style="text-align: center; margin-bottom: 30px;">
                                <h1 style="color: #4CAF50; margin: 0;">FENDI SHOP</h1>
                                <p style="margin: 0; font-style: italic; color: #888;">- TH·ªúI TRANG NAM N·ªÆ -</p>
                            </div>
                            <h2 style="text-align: center; color: #4CAF50;">üéâ C·∫£m ∆°n b·∫°n ƒë√£ ƒë·∫∑t h√†ng! üéâ</h2>
                            <p style="color: #555;">Xin ch√†o <strong>${order.customerInfor.fullname || "Kh√°ch h√†ng"}</strong>,</p>
                            <p style="color: #555;">Ch√∫ng t√¥i ƒë√£ nh·∫≠n ƒë∆∞·ª£c ƒë∆°n h√†ng c·ªßa b·∫°n. ƒê∆°n h√†ng hi·ªán ƒëang ƒë∆∞·ª£c x·ª≠ l√Ω v√† s·∫Ω s·ªõm ƒë∆∞·ª£c giao ƒë·∫øn b·∫°n. D∆∞·ªõi ƒë√¢y l√† th√¥ng tin chi ti·∫øt:</p>
                            
                            <div style="background: #ffffff; padding: 15px; border-radius: 8px; margin-bottom: 20px;">
                                <h3 style="color: #333; border-bottom: 1px solid #ddd; padding-bottom: 10px;">Th√¥ng tin ƒë∆°n h√†ng</h3>
                                <table style="width: 100%;">
                                    <tr>
                                        <td style="color: #555;">M√£ ƒë∆°n h√†ng:</td>
                                        <td style="color: #000;"><strong>${order.orderNumber}</strong></td>
                                    </tr>
                                    <tr>
                                        <td style="color: #555;">Ng√†y ƒë·∫∑t h√†ng:</td>
                                        <td style="color: #000;">${new Date(order.createdAt).toLocaleString()}</td>
                                    </tr>
                                    <tr>
                                        <td style="color: #555;">Ph∆∞∆°ng th·ª©c thanh to√°n:</td>
                                        <td style="color: #000;">Thanh to√°n khi nh·∫≠n h√†ng</td>
                                    </tr>
                                    <tr>
                                        <td style="color: #555;">T·ªïng ti·ªÅn (ch∆∞a bao g·ªìm ph√≠ ship):</td>
                                        <td style="color: #000;">${price.toLocaleString()}‚Ç´</td>
                                    </tr>
                                    <tr>
                                        <td style="color: #555;">Ph√≠ v·∫≠n chuy·ªÉn:</td>
                                        <td style="color: #000;">${shipPrice.toLocaleString()}‚Ç´</td>
                                    </tr>
                                    <tr>
                                        <td style="color: #555;">M√£ gi·∫£m gi√°:</td>
                                        <td style="color: #000;">${voucher.toLocaleString()}‚Ç´</td>
                                    </tr>
                                    <tr>
                                        <td style="color: #555;">T·ªïng c·ªông:</td>
                                        <td style="color: #4CAF50; font-weight: bold;">${TotalAmount.toLocaleString()}‚Ç´</td>
                                    </tr>
                                </table>
                            </div>

                            <div style="background: #ffffff; padding: 15px; border-radius: 8px; margin-bottom: 20px;">
                                <h3 style="color: #333; border-bottom: 1px solid #ddd; padding-bottom: 10px;">Th√¥ng tin giao h√†ng</h3>
                                <p style="color: #555;">
                                    <strong>Ng∆∞·ªùi nh·∫≠n:</strong> ${order.customerInfor.fullname}<br>
                                    <strong>ƒê·ªãa ch·ªâ:</strong> ${order.customerInfor.address}, ${order.customerInfor.ward}, ${order.customerInfor.district}, ${order.customerInfor.city}<br>
                                    <strong>S·ªë ƒëi·ªán tho·∫°i:</strong> ${order.customerInfor.phone}
                                </p>
                            </div>

                            <div style="background: #ffffff; padding: 15px; border-radius: 8px; margin-bottom: 20px;">
                                <h3 style="color: #333; border-bottom: 1px solid #ddd; padding-bottom: 10px;">Chi ti·∫øt s·∫£n ph·∫©m</h3>
                                <table style="width: 100%; border-collapse: collapse;">
                                    <thead>
                                        <tr style="background-color: #f0f0f0;">
                                            <th style="text-align: left; padding: 10px; border-bottom: 1px solid #ddd;">H√¨nh ·∫£nh</th>
                                            <th style="text-align: left; padding: 10px; border-bottom: 1px solid #ddd;">T√™n s·∫£n ph·∫©m</th>
                                            <th style="text-align: center; padding: 10px; border-bottom: 1px solid #ddd;">K√≠ch th∆∞·ªõc</th>
                                            <th style="text-align: center; padding: 10px; border-bottom: 1px solid #ddd;">M√†u s·∫Øc</th>
                                            <th style="text-align: center; padding: 10px; border-bottom: 1px solid #ddd;">S·ªë l∆∞·ª£ng</th>
                                            <th style="text-align: right; padding: 10px; border-bottom: 1px solid #ddd;">Gi√°</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        ${order.items
                                            .map(
                                                (item) => `
                                                <tr>
                                                    <td style="padding: 10px; border-bottom: 1px solid #ddd; text-align: center;">
                                                        <img src="${item?.gallery?.avatar}" alt="${item.name}" style="max-width: 50px; border-radius: 5px;">
                                                    </td>
                                                    <td style="padding: 10px; border-bottom: 1px solid #ddd;">${item.name}</td>
                                                    <td style="text-align: center; padding: 10px; border-bottom: 1px solid #ddd;">${item?.attribute?.color || "N/A"}</td>
                                                    <td style="text-align: center; padding: 10px; border-bottom: 1px solid #ddd;">${item?.attribute?.size || "N/A"}</td>
                                                    <td style="text-align: center; padding: 10px; border-bottom: 1px solid #ddd;">${item.quantity}</td>
                                                    <td style="text-align: right; padding: 10px; border-bottom: 1px solid #ddd;">${item.price.toLocaleString()}‚Ç´</td>
                                                </tr>
                                            `
                                            )
                                            .join("")}
                                    </tbody>
                                </table>
                            </div>

                            <p style="text-align: center; font-size: 14px; color: #888;">C·∫£m ∆°n b·∫°n ƒë√£ tin t∆∞·ªüng v√† l·ª±a ch·ªçn Fendi Shop! N·∫øu c√≥ b·∫•t k·ª≥ th·∫Øc m·∫Øc n√†o, vui l√≤ng li√™n h·ªá:</p>
                            <p style="text-align: center; font-weight: bold; color: #333;">üíå Hotline: 0968 949 781 | Email: support@shop.com</p>
                        </div>
                    `;

                    try {
                        await sendEmail(userEmail, subject, message);
                    } catch (emailError) {
                        console.error("L·ªói khi g·ª≠i email:", emailError);
                    }
                }
            } else {
                console.error("Kh√¥ng t√¨m th·∫•y email ng∆∞·ªùi d√πng");
            }
        }
        return res.status(StatusCodes.CREATED).json(order);
    } catch (error) {
        return res.status(StatusCodes.INTERNAL_SERVER_ERROR).json({ error: error.message });
    }
};

export const getAllOrder = async (req, res) => {
    try {
        // L·∫•y t·∫•t c·∫£ ƒë∆°n h√†ng v√† populate th√¥ng tin ng∆∞·ªùi d√πng v√† s·∫£n ph·∫©m
        const Orders = await orderModel.find()
            .populate('userId', 'fullname email')  // L·∫•y th√¥ng tin c∆° b·∫£n c·ªßa ng∆∞·ªùi d√πng
            .populate('items.productId', 'name price');  // L·∫•y th√¥ng tin c∆° b·∫£n c·ªßa s·∫£n ph·∫©m

        // Tr·∫£ v·ªÅ danh s√°ch ƒë∆°n h√†ng
        return res.status(StatusCodes.OK).json(Orders);
    } catch (error) {
        // Tr·∫£ v·ªÅ l·ªói n·∫øu c√≥ v·∫•n ƒë·ªÅ trong qu√° tr√¨nh l·∫•y ƒë∆°n h√†ng
        return res.status(StatusCodes.INTERNAL_SERVER_ERROR).json({ error });
    }
};

export const getOrderById = async (req, res) => {
    const { orderId } = req.params;

    try {
        // T√¨m ƒë∆°n h√†ng theo ID v√† populate th√¥ng tin ng∆∞·ªùi d√πng v√† s·∫£n ph·∫©m
        const order = await orderModel.findById(orderId)
            .populate('userId', 'fullname email phone')
            .populate('items.productId', 'name price');

        if (!order) {
            return res.status(StatusCodes.NOT_FOUND).json({ message: "Order not found" });
        }

        return res.status(StatusCodes.OK).json(order);
    } catch (error) {
        return res.status(StatusCodes.INTERNAL_SERVER_ERROR).json({ error: error.message });
    }
};

export const getOrderByUserId = async (req, res) => {
    try {
        const { userId } = req.params;
        const order = await orderModel.find({ userId })
        if (!order) {
            return res.status(StatusCodes.NOT_FOUND).json({ message: "Order not found" });
        }

        return res.status(StatusCodes.OK).json(order);
    } catch (error) {
        return res.status(StatusCodes.INTERNAL_SERVER_ERROR).json({ error: error.message });
    }
};

export const deleteOrder = async (req, res) => {
    const { orderId } = req.params;

    try {
        // X√≥a ƒë∆°n h√†ng theo ID
        const deletedOrder = await orderModel.findByIdAndDelete(orderId);

        if (!deletedOrder) {
            return res.status(StatusCodes.NOT_FOUND).json({ message: "Order not found" });
        }

        return res.status(StatusCodes.OK).json({ message: "Order deleted successfully" });
    } catch (error) {
        return res.status(StatusCodes.INTERNAL_SERVER_ERROR).json({ error: error.message });
    }
};


export const updateOrderStatus = async (req, res) => {
    const { orderId, status, cancelReason } = req.body;
  
    try {
      // Ki·ªÉm tra tr·∫°ng th√°i h·ª£p l·ªá
      const validStatuses = ["pending", "unpaid", "confirmed", "shipped", "delivered", "cancelled", "received","Returngoods","Complaints","Refunded","Exchanged"];
      if (!validStatuses.includes(status)) {
        return res.status(StatusCodes.BAD_REQUEST).json({ message: "Invalid order status" });
      }
  
      // N·∫øu tr·∫°ng th√°i l√† "cancelled", ki·ªÉm tra xem l√Ω do hu·ª∑ c√≥ t·ªìn t·∫°i kh√¥ng
      if (status === "cancelled" && !cancelReason) {
        return res.status(StatusCodes.BAD_REQUEST).json({ message: "Cancel reason is required for cancelled orders" });
    }
    
    // C·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë∆°n h√†ng
    const updatedOrder = await orderModel.findByIdAndUpdate(
        orderId,
        { status, cancelReason }, // C·∫≠p nh·∫≠t l√Ω do hu·ª∑ n·∫øu c√≥
        { new: true }
    ).populate('userId', 'email fullname');  // L·∫•y email v√† fullname t·ª´ userId

    if (!updatedOrder) {
        return res.status(StatusCodes.NOT_FOUND).json({ message: "Order not found" });
    }
  
      // Ki·ªÉm tra email ng∆∞·ªùi d√πng
      const userEmail = updatedOrder.userId.email;
      if (!userEmail) {
        return res.status(StatusCodes.INTERNAL_SERVER_ERROR).json({ message: "Email not found for the user" });
      }
  
      const statusTranslations = {
          pending: "Ch·ªù x·ª≠ l√Ω",
          unpaid: "Ch∆∞a thanh to√°n",
          confirmed: "ƒê√£ x√°c nh·∫≠n",
          shipped: "ƒêang giao",
          delivered: "ƒê√£ giao h√†ng",
          cancelled: "ƒê√£ h·ªßy",
          received: "ƒê√£ nh·∫≠n h√†ng",
          Returngoods:"Tr·∫£ h√†ng",
          Complaints:"ƒêang x·ª≠ l√Ω khi·∫øu n·∫°i",
        //   Refunded:"Ho√†n ti·ªÅn",
          Exchanged:"ƒê·ªïi tr·∫£ h√†ng",
        };
  
      const vietnameseStatus = statusTranslations[status];
      // G·ª≠i email cho kh√°ch h√†ng
      const subject = "C·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë∆°n h√†ng";
  
      const message = `
        <div style="font-family: Arial, sans-serif; max-width: 600px; margin: auto; padding: 20px; background: #f9f9f9; border: 1px solid #ddd; border-radius: 10px;">
            <div style="text-align: center; margin-bottom: 30px;">
                <h1 style="color: #4CAF50; margin: 0;">FENDI SHOP</h1>
                <p style="margin: 0; font-style: italic; color: #888;">- TH·ªúI TRANG NAM N·ªÆ -</p>
            </div>
            <h2 style="text-align: center; color: #FF0000;">üì¢ C·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë∆°n h√†ng üì¢</h2>
            <p style="color: #555;">Xin ch√†o <strong>${updatedOrder.customerInfor.fullname}</strong>,</p>
            <p style="color: #555;">Ch√∫ng t√¥i mu·ªën th√¥ng b√°o r·∫±ng ƒë∆°n h√†ng <strong>${updatedOrder.orderNumber}</strong> c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t tr·∫°ng th√°i th√†nh: <strong style="color: #FF0000;">${vietnameseStatus}</strong>.</p>
            
            <div style="background: #ffffff; padding: 15px; border-radius: 8px; margin-bottom: 20px;">
                <h3 style="color: #333; border-bottom: 1px solid #ddd; padding-bottom: 10px;">Th√¥ng tin ƒë∆°n h√†ng</h3>
                <table style="width: 100%; border-collapse: collapse;">
                    <tr style="background-color: #f0f0f0;">
                        <td style="color: #555; padding: 10px;">M√£ ƒë∆°n h√†ng:</td>
                        <td style="color: #000; padding: 10px;"><strong>${updatedOrder.orderNumber}</strong></td>
                    </tr>
                    <tr>
                        <td style="color: #555; padding: 10px;">Ng√†y ƒë·∫∑t h√†ng:</td>
                        <td style="color: #000; padding: 10px;">${new Date(updatedOrder.createdAt).toLocaleString()}</td>
                    </tr>
                    <tr style="background-color: #f0f0f0;">
                        <td style="color: #555; padding: 10px;">Tr·∫°ng th√°i hi·ªán t·∫°i:</td>
                        <td style="color: #FF0000; padding: 10px;"><strong>${vietnameseStatus}</strong></td>
                    </tr>
                </table>
            </div>

            <div style="text-align: center; margin-top: 30px;">
                <p style="color: #555;">C·∫£m ∆°n b·∫°n ƒë√£ tin t∆∞·ªüng mua s·∫Øm t·∫°i Fendi Shop! N·∫øu c√≥ b·∫•t k·ª≥ c√¢u h·ªèi n√†o, vui l√≤ng li√™n h·ªá v·ªõi ch√∫ng t√¥i qua:</p>
                <p style="text-align: center; font-weight: bold; color: #333;">üíå Hotline: 0968 949 781 | Email: support@shop.com</p>
            </div>

            <div style="margin-top: 30px; text-align: center;">
                <p style="color: #555;">Ch√∫c b·∫°n m·ªôt ng√†y tuy·ªát v·ªùi v√† h·∫πn g·∫∑p l·∫°i trong nh·ªØng l·∫ßn mua s·∫Øm ti·∫øp theo!</p>
            </div>
        </div>
      `;
  
      await sendEmail(userEmail, subject, message);
  
      // Tr·∫£ v·ªÅ ƒë∆°n h√†ng ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t
      return res.status(StatusCodes.OK).json(updatedOrder);
    } catch (error) {
      return res.status(StatusCodes.INTERNAL_SERVER_ERROR).json({ error: error.message });
    }
};

//h√†m thanh to√°n v·ªõi VNPay
export const paymentVNPay = async (req, res) => {
    try {

        const ipAddr = req.headers['x-forwarded-for'] ||
            req.connection.remoteAddress ||
            req.socket.remoteAddress ||
            req.connection.socket.remoteAddress;

        // Th√¥ng tin c·∫•u h√¨nh VNPay
        const tmnCode = "ML8JRUOJ";
        const secretKey = "TXA23XAHD604Z31OCUA3EKVP2PI5QOHA";
        const vnpUrl = "https://sandbox.vnpayment.vn/paymentv2/vpcpay.html";
        const returnUrl = "http://localhost:5000/api/orders/payment/vnpay/return";
        const date = new Date();
        const createDate = dateFormat(date, 'yyyymmddHHmmss');
        const orderId = req.body.orderId;
        const amount = req.body.amount;
        const bankCode = "";
        const orderInfo = 'Thanh toan cho ma GD:' + orderId;
        const orderType = 'other';
        date.setMinutes(date.getMinutes() + 15);
        const expireDateFormat = formatDateToCustomString(date); // ƒê·ªãnh d·∫°ng th√†nh yyyyMMddHHmmss
        let locale = "vn";
        if (!locale) locale = 'vn';
        const currCode = 'VND';
        console.log('ip', ipAddr)

        let vnp_Params = {};
        vnp_Params['vnp_Version'] = '2.1.0';
        vnp_Params['vnp_Command'] = 'pay';
        vnp_Params['vnp_TmnCode'] = tmnCode;
        vnp_Params['vnp_Locale'] = locale;
        vnp_Params['vnp_CurrCode'] = currCode;
        vnp_Params['vnp_TxnRef'] = orderId;
        vnp_Params['vnp_OrderInfo'] = orderInfo;
        vnp_Params['vnp_OrderType'] = orderType;
        vnp_Params['vnp_Amount'] = amount * 100;
        vnp_Params['vnp_ReturnUrl'] = returnUrl;
        vnp_Params['vnp_IpAddr'] = ipAddr;
        vnp_Params['vnp_CreateDate'] = createDate;
        vnp_Params['vnp_ExpireDate'] = expireDateFormat;

        if (bankCode) {
            vnp_Params['vnp_BankCode'] = bankCode;
        }

        // S·∫Øp x·∫øp c√°c tham s·ªë
        vnp_Params = sortObject(vnp_Params);

        // T·∫°o ch·ªØ k√Ω
        const signData = querystring.stringify(vnp_Params, { encode: false });
        const hmac = crypto.createHmac("sha512", secretKey);
        const signed = hmac.update(Buffer.from(signData, 'utf-8')).digest("hex");
        vnp_Params['vnp_SecureHash'] = signed;

        // T·∫°o URL thanh to√°n
        const paymentUrl = `${vnpUrl}?${querystring.stringify(vnp_Params, { encode: false })}`;

        // Chuy·ªÉn h∆∞·ªõng ƒë·∫øn URL thanh to√°n
        return res.json({ paymentUrl });
    } catch (error) {
        return res.status(StatusCodes.INTERNAL_SERVER_ERROR).json({ error: error.message });
    }
};





const successEmail = async (userEmail, orderNumber) => {
    const order = await orderModel.findOne({ orderNumber });
    if (!order) {
        return; // N·∫øu kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng, kh√¥ng l√†m g√¨ th√™m
    }

    const subject = "Thanh to√°n th√†nh c√¥ng";
    const voucher = order.voucher?.discountValue || 0;
    const shipPrice = order?.ship?.value?.price || 0;
    const price = order.totalPrice - shipPrice;
    const TotalAmount = voucher ? (order?.totalPrice - voucher?.discountValue) : order?.totalPrice;

    const message = `
                        <div style="font-family: Arial, sans-serif; max-width: 600px; margin: auto; padding: 20px; background: #f9f9f9; border: 1px solid #ddd; border-radius: 10px;">
                            <div style="text-align: center; margin-bottom: 30px;">
                                <h1 style="color: #4CAF50; margin: 0;">FENDI SHOP</h1>
                                <p style="margin: 0; font-style: italic; color: #888;">- TH·ªúI TRANG NAM N·ªÆ -</p>
                            </div>
                            <h2 style="text-align: center; color: #4CAF50;">üéâ C·∫£m ∆°n b·∫°n ƒë√£ ƒë·∫∑t h√†ng! üéâ</h2>
                            <p style="color: #555;">Xin ch√†o <strong>${order.customerInfor.fullname || "Kh√°ch h√†ng"}</strong>,</p>
                            <p style="color: #555;">Ch√∫ng t√¥i ƒë√£ nh·∫≠n ƒë∆∞·ª£c ƒë∆°n h√†ng c·ªßa b·∫°n. ƒê∆°n h√†ng hi·ªán ƒëang ƒë∆∞·ª£c x·ª≠ l√Ω v√† s·∫Ω s·ªõm ƒë∆∞·ª£c giao ƒë·∫øn b·∫°n. D∆∞·ªõi ƒë√¢y l√† th√¥ng tin chi ti·∫øt:</p>
                            
                            <div style="background: #ffffff; padding: 15px; border-radius: 8px; margin-bottom: 20px;">
                                <h3 style="color: #333; border-bottom: 1px solid #ddd; padding-bottom: 10px;">Th√¥ng tin ƒë∆°n h√†ng</h3>
                                <table style="width: 100%;">
                                    <tr>
                                        <td style="color: #555;">M√£ ƒë∆°n h√†ng:</td>
                                        <td style="color: #000;"><strong>${order.orderNumber}</strong></td>
                                    </tr>
                                    <tr>
                                        <td style="color: #555;">Ng√†y ƒë·∫∑t h√†ng:</td>
                                        <td style="color: #000;">${new Date(order.createdAt).toLocaleString()}</td>
                                    </tr>
                                    <tr>
                                        <td style="color: #555;">Ph∆∞∆°ng th·ª©c thanh to√°n:</td>
                                        <td style="color: #000;">Thanh to√°n khi nh·∫≠n h√†ng</td>
                                    </tr>
                                    <tr>
                                        <td style="color: #555;">T·ªïng ti·ªÅn (ch∆∞a bao g·ªìm ph√≠ ship):</td>
                                        <td style="color: #000;">${price.toLocaleString()}‚Ç´</td>
                                    </tr>
                                    <tr>
                                        <td style="color: #555;">Ph√≠ v·∫≠n chuy·ªÉn:</td>
                                        <td style="color: #000;">${shipPrice.toLocaleString()}‚Ç´</td>
                                    </tr>
                                    <tr>
                                        <td style="color: #555;">M√£ gi·∫£m gi√°:</td>
                                        <td style="color: #000;">${voucher.toLocaleString()}‚Ç´</td>
                                    </tr>
                                    <tr>
                                        <td style="color: #555;">T·ªïng c·ªông:</td>
                                        <td style="color: #4CAF50; font-weight: bold;">${TotalAmount.toLocaleString()}‚Ç´</td>
                                    </tr>
                                </table>
                            </div>

                            <div style="background: #ffffff; padding: 15px; border-radius: 8px; margin-bottom: 20px;">
                                <h3 style="color: #333; border-bottom: 1px solid #ddd; padding-bottom: 10px;">Th√¥ng tin giao h√†ng</h3>
                                <p style="color: #555;">
                                    <strong>Ng∆∞·ªùi nh·∫≠n:</strong> ${order.customerInfor.fullname}<br>
                                    <strong>ƒê·ªãa ch·ªâ:</strong> ${order.customerInfor.address}, ${order.customerInfor.ward}, ${order.customerInfor.district}, ${order.customerInfor.city}<br>
                                    <strong>S·ªë ƒëi·ªán tho·∫°i:</strong> ${order.customerInfor.phone}
                                </p>
                            </div>

                            <div style="background: #ffffff; padding: 15px; border-radius: 8px; margin-bottom: 20px;">
                                <h3 style="color: #333; border-bottom: 1px solid #ddd; padding-bottom: 10px;">Chi ti·∫øt s·∫£n ph·∫©m</h3>
                                <table style="width: 100%; border-collapse: collapse;">
                                    <thead>
                                        <tr style="background-color: #f0f0f0;">
                                            <th style="text-align: left; padding: 10px; border-bottom: 1px solid #ddd;">H√¨nh ·∫£nh</th>
                                            <th style="text-align: left; padding: 10px; border-bottom: 1px solid #ddd;">T√™n s·∫£n ph·∫©m</th>
                                            <th style="text-align: center; padding: 10px; border-bottom: 1px solid #ddd;">K√≠ch th∆∞·ªõc</th>
                                            <th style="text-align: center; padding: 10px; border-bottom: 1px solid #ddd;">M√†u s·∫Øc</th>
                                            <th style="text-align: center; padding: 10px; border-bottom: 1px solid #ddd;">S·ªë l∆∞·ª£ng</th>
                                            <th style="text-align: right; padding: 10px; border-bottom: 1px solid #ddd;">Gi√°</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        ${order.items
                                            .map(
                                                (item) => `
                                                <tr>
                                                    <td style="padding: 10px; border-bottom: 1px solid #ddd; text-align: center;">
                                                        <img src="${item?.gallery?.avatar}" alt="${item.name}" style="max-width: 50px; border-radius: 5px;">
                                                    </td>
                                                    <td style="padding: 10px; border-bottom: 1px solid #ddd;">${item.name}</td>
                                                    <td style="text-align: center; padding: 10px; border-bottom: 1px solid #ddd;">${item?.attribute?.color || "N/A"}</td>
                                                    <td style="text-align: center; padding: 10px; border-bottom: 1px solid #ddd;">${item?.attribute?.size || "N/A"}</td>
                                                    <td style="text-align: center; padding: 10px; border-bottom: 1px solid #ddd;">${item.quantity}</td>
                                                    <td style="text-align: right; padding: 10px; border-bottom: 1px solid #ddd;">${item.price.toLocaleString()}‚Ç´</td>
                                                </tr>
                                            `
                                            )
                                            .join("")}
                                    </tbody>
                                </table>
                            </div>

                            <p style="text-align: center; font-size: 14px; color: #888;">C·∫£m ∆°n b·∫°n ƒë√£ tin t∆∞·ªüng v√† l·ª±a ch·ªçn Fendi Shop! N·∫øu c√≥ b·∫•t k·ª≥ th·∫Øc m·∫Øc n√†o, vui l√≤ng li√™n h·ªá:</p>
                            <p style="text-align: center; font-weight: bold; color: #333;">üíå Hotline: 0968 949 781 | Email: support@shop.com</p>
                        </div>
                    `;

    await sendEmail(userEmail, subject, message);
};




const failedEmail = async (userEmail, orderNumber) => {
    const order = await orderModel.findOne({ orderNumber });
    if (!order) {
        return; // N·∫øu kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng, kh√¥ng l√†m g√¨ th√™m
    }

    const subject = "Thanh to√°n th·∫•t b·∫°i";

    const message = `
        <div style="font-family: Arial, sans-serif; max-width: 600px; margin: auto; padding: 20px; background: #f9f9f9; border: 1px solid #ddd; border-radius: 10px;">
            <div style="text-align: center; margin-bottom: 30px;">
                <h1 style="color: #FF0000; margin: 0;">FENDI SHOP</h1>
                <p style="margin: 0; font-style: italic; color: #888;">- TH·ªúI TRANG NAM N·ªÆ -</p>
            </div>
            <h2 style="text-align: center; color: #FF0000;">‚ùå Thanh to√°n th·∫•t b·∫°i ‚ùå</h2>
            <p style="color: #555;">Xin ch√†o <strong>${order?.customerInfor?.fullname || "Kh√°ch h√†ng"}</strong>,</p>
            <p style="color: #555;">ƒê∆°n h√†ng <strong>${orderNumber}</strong> c·ªßa b·∫°n ch∆∞a ƒë∆∞·ª£c thanh to√°n th√†nh c√¥ng. Vui l√≤ng th·ª≠ l·∫°i ho·∫∑c li√™n h·ªá v·ªõi ch√∫ng t√¥i ƒë·ªÉ ƒë∆∞·ª£c h·ªó tr·ª£.</p>
            <p style="color: #555;">L∆∞u √Ω: N·∫øu b·∫°n kh√¥ng th·ª±c hi·ªán thanh to√°n trong v√≤ng 3 ng√†y k·ªÉ t·ª´ ng√†y ƒë·∫∑t h√†ng, ƒë∆°n h√†ng c·ªßa b·∫°n s·∫Ω b·ªã hu·ª∑.</p>

            <div style="background: #ffffff; padding: 15px; border-radius: 8px; margin-bottom: 20px;">
                <h3 style="color: #333; border-bottom: 1px solid #ddd; padding-bottom: 10px;">Th√¥ng tin ƒë∆°n h√†ng</h3>
                <table style="width: 100%; border-collapse: collapse;">
                    <tr style="background-color: #f0f0f0;">
                        <td style="color: #555; padding: 10px;">M√£ ƒë∆°n h√†ng:</td>
                        <td style="color: #000; padding: 10px;"><strong>${orderNumber}</strong></td>
                    </tr>
                    <tr>
                        <td style="color: #555; padding: 10px;">Ng√†y ƒë·∫∑t h√†ng:</td>
                        <td style="color: #000; padding: 10px;">${new Date(order.createdAt).toLocaleString()}</td>
                    </tr>
                </table>
            </div>

            <p style="text-align: center; font-size: 14px; color: #888;">N·∫øu c√≥ b·∫•t k·ª≥ c√¢u h·ªèi n√†o, vui l√≤ng li√™n h·ªá v·ªõi ch√∫ng t√¥i:</p>
            <p style="text-align: center; font-weight: bold; color: #333;">üíå Hotline: 0968 949 781 | Email: support@shop.com</p>

            <div style="margin-top: 20px; text-align: center;">
                <p style="color: #555;">C·∫£m ∆°n b·∫°n ƒë√£ tin t∆∞·ªüng mua s·∫Øm t·∫°i Fendi Shop. Ch√∫ng t√¥i lu√¥n s·∫µn s√†ng h·ªó tr·ª£ b·∫°n!</p>
                <p style="color: #555;">Ch√∫c b·∫°n m·ªôt ng√†y tuy·ªát v·ªùi!</p>
            </div>
        </div>
    `;

    await sendEmail(userEmail, subject, message);
};






//huy·ªÉn h∆∞·ªõng l·∫°i trang c·ªßa b·∫°n v·ªõi th√¥ng tin thanh to√°n
export const vnpayReturn = async (req, res) => {
    const vnp_Params = req.query;
    const secureHash = vnp_Params['vnp_SecureHash'];
    delete vnp_Params['vnp_SecureHash'];
    delete vnp_Params['vnp_SecureHashType'];

    const secretKey = 'TXA23XAHD604Z31OCUA3EKVP2PI5QOHA';
    const sortedParams = sortObject(vnp_Params);

    const queryString = querystring.stringify(sortedParams, { encode: false });
    const hash = crypto.createHmac('sha512', secretKey).update(queryString).digest('hex');
    if (hash === secureHash) {
        const orderNumber = vnp_Params['vnp_TxnRef']
        const order = await orderModel.findOne({ orderNumber });
        if (!order) {
            console.error("Order not found for orderNumber:", orderNumber);
            return res.status(404).json({ message: 'Order not found' });
        }
        // L·∫•y email t·ª´ UserModel d·ª±a tr√™n userId c·ªßa ƒë∆°n h√†ng
        const user = await UserModel.findById(order.userId);
        const userEmail = user?.email || ""; // Email c·ªßa ng∆∞·ªùi d√πng
        console.log(userEmail)
        if (vnp_Params['vnp_ResponseCode'] === '00') {

            await orderModel.findOneAndUpdate({ orderNumber }, { status: "pending",paymentStatus: "ƒê√£ thanh to√°n" })
             // G·ª≠i email x√°c nh·∫≠n thanh to√°n th√†nh c√¥ng
             if(userEmail){
                await successEmail(userEmail, orderNumber);  // G·ªçi h√†m g·ª≠i email th√†nh c√¥ng
             }
            return res.redirect('http://localhost:5173/thanks');
        } else {
            await orderModel.findOneAndUpdate({ orderNumber }, { status: "unpaid",paymentStatus: "Ch∆∞a thanh to√°n" })
            if(userEmail){
                // G·ª≠i email th√¥ng b√°o thanh to√°n th·∫•t b·∫°i
                await failedEmail(userEmail, orderNumber);  // G·ªçi h√†m g·ª≠i email th·∫•t b·∫°i
             }
            return res.redirect('http://localhost:5173/canpay');
        }
    } else {
        return res.status(400).json({ message: 'Ch·ªØ k√Ω kh√¥ng h·ª£p l·ªá' });
    }
};

// IPn vi·ªác x√°c th·ª±c tr·∫°ng th√°i c·ªßa bill thanh to√°n khi th√†nh c√¥ng hay th·∫•t b·∫°i
export const vnpayIPN = async (req, res) => {
    try {
        const vnp_Params = req.query;

        // L·∫•y SecureHash t·ª´ request c·ªßa VNPay v√† x√≥a c√°c tham s·ªë kh√¥ng li√™n quan
        const secureHash = vnp_Params['vnp_SecureHash'];
        delete vnp_Params['vnp_SecureHash'];
        delete vnp_Params['vnp_SecureHashType'];

        // S·∫Øp x·∫øp c√°c tham s·ªë c√≤n l·∫°i
        const sortedParams = sortObject(vnp_Params);

        // T·∫°o hash t·ª´ tham s·ªë ƒë√£ s·∫Øp x·∫øp v√† so s√°nh v·ªõi SecureHash c·ªßa VNPay
        const secretKey = 'TXA23XAHD604Z31OCUA3EKVP2PI5QOHA';
        const queryString = querystring.stringify(sortedParams, { encode: false });
        const hash = crypto.createHmac('sha512', secretKey).update(queryString).digest('hex');

        if (hash !== secureHash) {
            return res.status(StatusCodes.BAD_REQUEST).json({ message: 'Ch·ªØ k√Ω kh√¥ng h·ª£p l·ªá' });
        }

        // L·∫•y th√¥ng tin t·ª´ request
        const { vnp_TxnRef, vnp_ResponseCode, vnp_Amount } = vnp_Params;

        // Ki·ªÉm tra tr·∫°ng th√°i giao d·ªãch t·ª´ VNPay
        if (vnp_ResponseCode === '00') {
            // Giao d·ªãch th√†nh c√¥ng, c·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë∆°n h√†ng
            const updatedOrder = await orderModel.findOneAndUpdate(
                { orderNumber: vnp_TxnRef },
                { status: 'paid', paymentDate: new Date() },
                { new: true }
            );

            if (!updatedOrder) {
                return res.status(StatusCodes.NOT_FOUND).json({ message: 'Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng' });
            }

            // G·ª≠i ph·∫£n h·ªìi th√†nh c√¥ng cho VNPay
            return res.status(StatusCodes.OK).json({ RspCode: '00', Message: 'Success' });
        } else {
            // Giao d·ªãch th·∫•t b·∫°i, c·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë∆°n h√†ng
            await orderModel.findOneAndUpdate(
                { orderNumber: vnp_TxnRef },
                { status: 'unpaid' }
            );

            // G·ª≠i ph·∫£n h·ªìi th·∫•t b·∫°i cho VNPay
            return res.status(StatusCodes.OK).json({ RspCode: '00', Message: 'Success' });
        }
    } catch (error) {
        console.error('VNPay IPN Error:', error.message);
        return res.status(StatusCodes.INTERNAL_SERVER_ERROR).json({ RspCode: '99', Message: 'l·ªói kh√¥ng x√°c ƒë·ªãnh' });
    }
};



// H√†m t·∫°o li√™n k·∫øt thanh to√°n b·∫±ng VNPay cho ƒë∆°n thanh to√°n l·∫°i
export const generateVNPayLink = async (order) => {
    const vnpUrl = 'https://sandbox.vnpayment.vn/paymentv2/vpcpay.html';
    const vnpTmnCode = 'ML8JRUOJ';
    const vnpHashSecret = 'TXA23XAHD604Z31OCUA3EKVP2PI5QOHA';
    const returnUrl = 'http://localhost:5000/api/orders/payment/vnpay/return'; // URL callback sau thanh to√°n

    const createDate = new Date().toISOString().replace(/[-:T.]/g, '').slice(0, 14);
    const orderNumber = order.orderNumber;

    const params = {
        vnp_Version: '2.1.0',
        vnp_Command: 'pay',
        vnp_TmnCode: vnpTmnCode,
        vnp_Amount: order.totalPrice * 100, // ƒê∆°n v·ªã: VND * 100
        vnp_CurrCode: 'VND',
        vnp_TxnRef: orderNumber, // S·ª≠ d·ª•ng orderNumber l√†m m√£ tham chi·∫øu
        vnp_OrderInfo: `Thanh toan don hang ${orderNumber}`,
        vnp_OrderType: 'other',
        vnp_Locale: 'vn',
        vnp_ReturnUrl: returnUrl,
        vnp_CreateDate: createDate,
        vnp_IpAddr: '127.0.0.1',
    };

    // S·∫Øp x·∫øp c√°c tham s·ªë
    const sortedParams = sortObject(params);

    const queryString = querystring.stringify(sortedParams, { encode: false });
    const signData = crypto
        .createHmac('sha512', vnpHashSecret)
        .update(queryString)
        .digest('hex');

    // T·∫°o URL thanh to√°n ƒë·∫ßy ƒë·ªß
    return `${vnpUrl}?${queryString}&vnp_SecureHash=${signData}`;
};

// thanh to√°n l·∫°i ƒë∆°n h√†ng
export const initiatePayment = async (req, res) => {
    const { orderId } = req.params; // L·∫•y ID ƒë∆°n h√†ng t·ª´ route params

    try {
        // 1. T√¨m ƒë∆°n h√†ng theo ID
        const order = await orderModel.findById(orderId);

        if (!order) {
            return res.status(404).json({ message: 'ƒê∆°n h√†ng kh√¥ng t·ªìn t·∫°i.' });
        }

        // 2. Ki·ªÉm tra tr·∫°ng th√°i ƒë∆°n h√†ng
        if (order.status !== 'unpaid') {
            return res.status(400).json({ message: 'ƒê∆°n h√†ng ƒë√£ ƒë∆∞·ª£c thanh to√°n ho·∫∑c b·ªã h·ªßy.' });
        }

        // 3. T·∫°o li√™n k·∫øt thanh to√°n b·∫±ng VNPay
        const paymentLink = await generateVNPayLink(order); // H√†m n√†y s·∫Ω ƒë∆∞·ª£c t·∫°o ·ªü b∆∞·ªõc 1.2

        res.status(200).json({ paymentLink }); // Tr·∫£ v·ªÅ link thanh to√°n cho frontend
    } catch (error) {
        console.error('L·ªói khi x·ª≠ l√Ω thanh to√°n l·∫°i:', error);
        res.status(500).json({ message: 'L·ªói server khi x·ª≠ l√Ω thanh to√°n l·∫°i.' });
    }
};