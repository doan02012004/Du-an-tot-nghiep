import { StatusCodes } from "http-status-codes";
import complaintModel from "../models/complaintModel.js";
import orderModel from "../models/orderModel.js";
import sendEmail from "../utils/sendEmail.js";
import UserModel from "../models/userModel.js";

// T·∫°o khi·∫øu n·∫°i cho ƒë∆°n h√†ng
export const createComplaint = async (req, res) => {
    const { orderId, complaintReason } = req.body;

    try {
        // Ki·ªÉm tra xem ƒë∆°n h√†ng c√≥ t·ªìn t·∫°i kh√¥ng
        const order = await orderModel.findById(orderId);
        if (!order) {
            return res.status(StatusCodes.NOT_FOUND).json({ message: "Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng" });
        }

        // Ki·ªÉm tra tr·∫°ng th√°i ƒë∆°n h√†ng, ch·ªâ khi ƒë∆°n h√†ng ƒë√£ "received" m·ªõi cho ph√©p khi·∫øu n·∫°i
        if (order.status !== 'received' && order.status !== 'delivered' ) {
            return res.status(StatusCodes.BAD_REQUEST).json({ message: "B·∫°n ch·ªâ c√≥ th·ªÉ n·ªôp ƒë∆°n khi·∫øu n·∫°i khi nh·∫≠n ƒë∆∞·ª£c ƒë∆°n ƒë·∫∑t h√†ng" });
        }

        // T·∫°o khi·∫øu n·∫°i m·ªõi
        const complaint = await complaintModel.create({
            orderId,
            userId: order.userId,
            complaintReason,
            status: 'new', // ƒê·∫∑t tr·∫°ng th√°i khi·∫øu n·∫°i ban ƒë·∫ßu l√† "new"
        });

        // L·∫•y th√¥ng tin ng∆∞·ªùi d√πng t·ª´ order.userId
        const user = await UserModel.findById(order.userId);
        const userEmail = user?.email;
        console.log(user)

        if (userEmail) {
            // G·ª≠i email th√¥ng b√°o ƒë√£ nh·∫≠n ƒë∆∞·ª£c khi·∫øu n·∫°i
            const subject = "Th√¥ng b√°o khi·∫øu n·∫°i ƒë∆°n h√†ng";
            const message = `
              <div style="font-family: Arial, sans-serif; max-width: 600px; margin: auto; padding: 20px; background: #f9f9f9; border: 1px solid #ddd; border-radius: 10px;">
                <div style="text-align: center; margin-bottom: 30px;">
                    <h1 style="color: #4CAF50; margin: 0;">FENDI SHOP</h1>
                    <p style="margin: 0; font-style: italic; color: #888;">- TH·ªúI TRANG NAM N·ªÆ -</p>
                </div>
                <h2 style="text-align: center; color: #FF0000;">üì¢ Th√¥ng b√°o khi·∫øu n·∫°i ƒë∆°n h√†ng üì¢</h2>
                <p style="color: #555;">Xin ch√†o <strong>${user.firstname} ${user.lastname}</strong>,</p>
                <p style="color: #555;">Ch√∫ng t√¥i ƒë√£ nh·∫≠n ƒë∆∞·ª£c khi·∫øu n·∫°i c·ªßa b·∫°n li√™n quan ƒë·∫øn ƒë∆°n h√†ng <strong>${order.orderNumber}</strong> v·ªõi l√Ω do: <strong>${complaintReason}</strong>.</p>
                <p style="color: #555;">Ch√∫ng t√¥i s·∫Ω xem x√©t v√† x·ª≠ l√Ω khi·∫øu n·∫°i c·ªßa b·∫°n trong th·ªùi gian s·ªõm nh·∫•t. B·∫°n s·∫Ω nh·∫≠n ƒë∆∞·ª£c th√¥ng b√°o khi ch√∫ng t√¥i c√≥ k·∫øt qu·∫£ x·ª≠ l√Ω.</p>
                
                <div style="background: #ffffff; padding: 15px; border-radius: 8px; margin-top: 20px;">
                    <h3 style="color: #333; border-bottom: 1px solid #ddd; padding-bottom: 10px;">Th√¥ng tin ƒë∆°n h√†ng</h3>
                    <table style="width: 100%; border-collapse: collapse;">
                        <tr style="background-color: #f0f0f0;">
                            <td style="color: #555; padding: 10px;">M√£ ƒë∆°n h√†ng:</td>
                            <td style="color: #000; padding: 10px;"><strong>${order.orderNumber}</strong></td>
                        </tr>
                        <tr>
                            <td style="color: #555; padding: 10px;">Ng√†y ƒë·∫∑t h√†ng:</td>
                            <td style="color: #000; padding: 10px;">${new Date(order.createdAt).toLocaleString()}</td>
                        </tr>
                    </table>
                </div>
      
                <div style="text-align: center; margin-top: 30px;">
                    <p style="color: #555;">C·∫£m ∆°n b·∫°n ƒë√£ th√¥ng b√°o cho ch√∫ng t√¥i. Ch√∫ng t√¥i s·∫Ω li√™n h·ªá v·ªõi b·∫°n trong th·ªùi gian s·ªõm nh·∫•t n·∫øu c·∫ßn th√™m th√¥ng tin.</p>
                    <p style="text-align: center; font-weight: bold; color: #333;">üíå Hotline: 0968 949 781 | Email: support@shop.com</p>
                </div>
      
                <div style="margin-top: 30px; text-align: center;">
                    <p style="color: #555;">Ch√∫c b·∫°n m·ªôt ng√†y tuy·ªát v·ªùi v√† h·∫πn g·∫∑p l·∫°i trong nh·ªØng l·∫ßn mua s·∫Øm ti·∫øp theo!</p>
                </div>
              </div>
            `;
      
            // G·ª≠i email cho kh√°ch h√†ng
            await sendEmail(userEmail, subject, message);
          }

        // Tr·∫£ v·ªÅ th√¥ng tin khi·∫øu n·∫°i ƒë√£ ƒë∆∞·ª£c t·∫°o
        return res.status(StatusCodes.CREATED).json(complaint);
    } catch (error) {
        return res.status(StatusCodes.INTERNAL_SERVER_ERROR).json({ error: error.message });
    }
};

// L·∫•y t·∫•t c·∫£ khi·∫øu n·∫°i
export const getAllComplaints = async (req, res) => {
    try {
        const complaints = await complaintModel.find().populate('orderId', 'orderNumber totalPrice').populate('userId', 'fullname email');

        return res.status(StatusCodes.OK).json(complaints);
    } catch (error) {
        return res.status(StatusCodes.INTERNAL_SERVER_ERROR).json({ error: error.message });
    }
};

// L·∫•y khi·∫øu n·∫°i theo ID
export const getComplaintById = async (req, res) => {
    const { complaintId } = req.params;

    try {
        const complaint = await complaintModel.findById(complaintId)
            .populate('orderId', 'orderNumber totalPrice')
            .populate('userId', 'fullname email');

        if (!complaint) {
            return res.status(StatusCodes.NOT_FOUND).json({ message: "Complaint not found" });
        }

        return res.status(StatusCodes.OK).json(complaint);
    } catch (error) {
        return res.status(StatusCodes.INTERNAL_SERVER_ERROR).json({ error: error.message });
    }
};

// C·∫≠p nh·∫≠t tr·∫°ng th√°i khi·∫øu n·∫°i
export const updateComplaintStatus = async (req, res) => {
    const { complaintId, status, response } = req.body;

    try {
        // Ki·ªÉm tra tr·∫°ng th√°i h·ª£p l·ªá c·ªßa khi·∫øu n·∫°i
        const validStatuses = ["new", "in_progress", "resolved","cancelled"];
        if (!validStatuses.includes(status)) {
            return res.status(StatusCodes.BAD_REQUEST).json({ message: "Invalid complaint status" });
        }

        // C·∫≠p nh·∫≠t khi·∫øu n·∫°i
        const updatedComplaint = await complaintModel.findByIdAndUpdate(
            complaintId,
            { status, response },
            { new: true }
        );

        if (!updatedComplaint) {
            return res.status(StatusCodes.NOT_FOUND).json({ message: "Complaint not found" });
        }

        // L·∫•y th√¥ng tin ng∆∞·ªùi d√πng
        const user = await UserModel.findById(updatedComplaint.userId);
        const userEmail = user?.email;
        const statusTranslations = {
            new: "M·ªõi",
            in_progress: "ƒêang x·ª≠ l√Ω",
            resolved: "ƒê√£ gi·∫£i quy·∫øt",
            cancelled: "Hu·ª∑ khi·∫øu n·∫°i"
          };
    
        const vietnameseStatus = statusTranslations[updatedComplaint.status];
        const order = await orderModel.findById(updatedComplaint.orderId);  
        if (userEmail) {
            // G·ª≠i email th√¥ng b√°o v·ªÅ tr·∫°ng th√°i khi·∫øu n·∫°i
            const subject = "C·∫≠p nh·∫≠t tr·∫°ng th√°i khi·∫øu n·∫°i c·ªßa b·∫°n";
            const message = `
                <div style="font-family: Arial, sans-serif; max-width: 600px; margin: auto; padding: 20px; background: #f9f9f9; border: 1px solid #ddd; border-radius: 10px;">
                    <div style="text-align: center; margin-bottom: 30px;">
                        <h1 style="color: #4CAF50; margin: 0;">FENDI SHOP</h1>
                        <p style="margin: 0; font-style: italic; color: #888;">- TH·ªúI TRANG NAM N·ªÆ -</p>
                    </div>
                    <h2 style="text-align: center; color: #FF0000;">üì¢ C·∫≠p nh·∫≠t khi·∫øu n·∫°i c·ªßa b·∫°n üì¢</h2>
                    <p style="color: #555;">Xin ch√†o <strong>${user.firstname} ${user.lastname}</strong>,</p>
                    <p style="color: #555;">Ch√∫ng t√¥i mu·ªën th√¥ng b√°o r·∫±ng khi·∫øu n·∫°i c·ªßa b·∫°n v·ªÅ ƒë∆°n h√†ng <strong>${order.orderNumber}</strong> ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t v·ªõi tr·∫°ng th√°i: <strong style="color: #FF0000;">${vietnameseStatus}</strong>.</p>
                    <p style="color: #555;">Tr·∫£ l·ªùi c·ªßa ch√∫ng t√¥i: <em>${updatedComplaint.response}</em></p>
                    
                    <div style="background: #ffffff; padding: 15px; border-radius: 8px; margin-top: 20px;">
                        <h3 style="color: #333; border-bottom: 1px solid #ddd; padding-bottom: 10px;">Th√¥ng tin khi·∫øu n·∫°i</h3>
                        <table style="width: 100%; border-collapse: collapse;">
                            <tr style="background-color: #f0f0f0;">
                                <td style="color: #555; padding: 10px;">M√£ khi·∫øu n·∫°i:</td>
                                <td style="color: #000; padding: 10px;"><strong>${updatedComplaint._id}</strong></td>
                            </tr>
                            <tr>
                                <td style="color: #555; padding: 10px;">Ng√†y khi·∫øu n·∫°i:</td>
                                <td style="color: #000; padding: 10px;">${new Date(updatedComplaint.createdAt).toLocaleString()}</td>
                            </tr>
                            <tr style="background-color: #f0f0f0;">
                                <td style="color: #555; padding: 10px;">Tr·∫°ng th√°i hi·ªán t·∫°i:</td>
                                <td style="color: #FF0000; padding: 10px;"><strong>${vietnameseStatus}</strong></td>
                            </tr>
                            <tr>
                                <td style="color: #555; padding: 10px;">L√Ω do khi·∫øu n·∫°i:</td>
                                <td style="color: #000; padding: 10px;">${updatedComplaint.complaintReason}</td>
                            </tr>
                        </table>
                    </div>

                    <div style="text-align: center; margin-top: 30px;">
                        <p style="color: #555;">Ch√∫ng t√¥i xin ch√¢n th√†nh c·∫£m ∆°n b·∫°n ƒë√£ li√™n h·ªá v√† ph·∫£n √°nh v·∫•n ƒë·ªÅ. Ch√∫ng t√¥i lu√¥n n·ªó l·ª±c ƒë·ªÉ n√¢ng cao ch·∫•t l∆∞·ª£ng d·ªãch v·ª• v√† mang l·∫°i s·ª± h√†i l√≤ng cho kh√°ch h√†ng. N·∫øu b·∫°n c·∫ßn th√™m th√¥ng tin, vui l√≤ng li√™n h·ªá ch√∫ng t√¥i qua:</p>
                        <p style="text-align: center; font-weight: bold; color: #333;">üíå Hotline: 0968 949 781 | Email: support@shop.com</p>
                    </div>

                    <div style="margin-top: 30px; text-align: center;">
                        <p style="color: #555;">Ch√∫c b·∫°n m·ªôt ng√†y tuy·ªát v·ªùi v√† h·∫πn g·∫∑p l·∫°i trong nh·ªØng l·∫ßn mua s·∫Øm ti·∫øp theo!</p>
                    </div>
                </div>
            `;
  
            // G·ª≠i email cho kh√°ch h√†ng
            await sendEmail(userEmail, subject, message);
        }

        // Tr·∫£ v·ªÅ khi·∫øu n·∫°i ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t
        return res.status(StatusCodes.OK).json(updatedComplaint);
    } catch (error) {
        return res.status(StatusCodes.INTERNAL_SERVER_ERROR).json({ error: error.message });
    }
};


export const cancelComplaint = async (req, res) => {
    const { complaintId } = req.params;

    try {
        // T√¨m khi·∫øu n·∫°i
        const complaint = await complaintModel.findById(complaintId);

        if (!complaint) {
            return res.status(StatusCodes.NOT_FOUND).json({ message: "Kh√¥ng t√¨m th·∫•y khi·∫øu n·∫°i" });
        }

        // Ki·ªÉm tra tr·∫°ng th√°i
        if (complaint.status !== "new") {
            return res.status(StatusCodes.BAD_REQUEST).json({ message: "Ch·ªâ c√≥ th·ªÉ h·ªßy khi·∫øu n·∫°i khi tr·∫°ng th√°i l√† 'M·ªõi'" });
        }

        // L·∫•y th√¥ng tin ng∆∞·ªùi d√πng
        const user = await UserModel.findById(complaint.userId);
        const userEmail = user?.email;

        // X√≥a khi·∫øu n·∫°i
        await complaintModel.findByIdAndDelete(complaintId);

        // G·ª≠i email th√¥ng b√°o (n·∫øu c√≥ email c·ªßa kh√°ch h√†ng)
        if (userEmail) {
            const subject = "X√°c nh·∫≠n h·ªßy khi·∫øu n·∫°i";
            const message = `Xin ch√†o ${user.firstname} ${user.lastname},\n\nKhi·∫øu n·∫°i c·ªßa b·∫°n v·ªÅ ƒë∆°n h√†ng ${complaint.orderId} ƒë√£ ƒë∆∞·ª£c h·ªßy th√†nh c√¥ng.\n\nN·∫øu ƒë√¢y kh√¥ng ph·∫£i thao t√°c c·ªßa b·∫°n, vui l√≤ng li√™n h·ªá v·ªõi ch√∫ng t√¥i ngay l·∫≠p t·ª©c.\n\nTr√¢n tr·ªçng,\nƒê·ªôi ng≈© h·ªó tr·ª£ kh√°ch h√†ng.`;

            await sendEmail(userEmail, subject, message);
        }

        return res.status(StatusCodes.OK).json({ message: "Khi·∫øu n·∫°i ƒë√£ ƒë∆∞·ª£c h·ªßy th√†nh c√¥ng" });
    } catch (error) {
        return res.status(StatusCodes.INTERNAL_SERVER_ERROR).json({ error: error.message });
    }
};